package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Dog;
import com.example.jdbcdemo.domain.Shelter;

public class DogsShelterManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableShelter = "CREATE TABLE Shelter("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ " name varchar(20)," + " nrTel integer,"
			+ " advertisingLabel varchar(30)," + " PRIMARY KEY (id))";

	private String createTablePies = "CREATE TABLE Dog("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ " name varchar(20),"
			+ " yob integer,"
			+ " breed varchar(20),"
			+ " shelter_id bigint,"
			+ " FOREIGN KEY (shelter_id) REFERENCES Shelter(id) ON DELETE CASCADE)";

	private PreparedStatement addDogStmt;
	private PreparedStatement deleteAllDogsStmt;
	private PreparedStatement getAllDogsStmt;
	private PreparedStatement getAllDogsByShelterId;
	private PreparedStatement updateDogsShelter;
	private PreparedStatement getDogByNameStmt;
	private PreparedStatement deleteDogByShelterStmt;
	

	private PreparedStatement addShelterStmt;
	private PreparedStatement deleteAllShelterStmt;
	private PreparedStatement getAllShelterStmt;
	private PreparedStatement getShelterByNameStmt;

	private Statement statement;

	public DogsShelterManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);

			boolean ShelterTableExists = false;
			boolean PiesTableExists = false;

			while (rs.next()) {
				if ("Shelter".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					ShelterTableExists = true;
				}
				if ("Dog".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					PiesTableExists = true;
				}
			}

			if (!ShelterTableExists) {
				statement.executeUpdate(createTableShelter);
			}
			if (!PiesTableExists) {
				statement.executeUpdate(createTablePies);
			}

			addShelterStmt = connection
					.prepareStatement("INSERT INTO Shelter (name, nrTel, advertisingLabel) VALUES (?, ?, ?)");
			deleteAllShelterStmt = connection
					.prepareStatement("DELETE FROM Shelter");
			getAllShelterStmt = connection
					.prepareStatement("SELECT id, name, nrTel, advertisingLabel FROM Shelter");
			getShelterByNameStmt = connection
					.prepareStatement("SELECT id, name, nrTel, advertisingLabel FROM Shelter WHERE id = ?");

			addDogStmt = connection
					.prepareStatement("INSERT INTO Dog (name, yob, breed, shelter_id) VALUES (?, ?, ?, ?)");
			deleteAllDogsStmt = connection
					.prepareStatement("DELETE FROM Dog");
			getAllDogsStmt = connection
					.prepareStatement("SELECT id, name, yob, breed, shelter_id FROM Dog");
			getDogByNameStmt = connection
					.prepareStatement("SELECT id, name, yob, breed, shelter_id FROM Dog WHERE name = ? ");
			getAllDogsByShelterId = connection
					.prepareStatement("SELECT id, name, yob, breed, shelter_id FROM Dog WHERE shelter_id = ?");
			updateDogsShelter = connection
					.prepareStatement("UPDATE Dog SET shelter_id = ? WHERE id = ?");
			deleteDogByShelterStmt = connection
					.prepareStatement("DELETE FROM Dog WHERE shelter_id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	void clearSchrniska() {
		try {
			deleteAllShelterStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	void clearPiess() {
		try {
			deleteAllDogsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * dodanie do bazy y
	 */
	public int addShelter(Shelter shelter) {
		int count = 0;
		try {
			addShelterStmt.setString(1, shelter.getName());
			addShelterStmt.setInt(2, shelter.getNrTel());
			addShelterStmt.setString(3, shelter.getAdvertisingLabel());

			count = addShelterStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	/**
	 * dodanie do bazy x
	 */
	public int addPies(Dog Dog) {
		int count = 0;
		try {
			addDogStmt.setString(1, Dog.getName());
			addDogStmt.setInt(2, Dog.getYob());
			addDogStmt.setString(3, Dog.getBreed());
			addDogStmt.setLong(4, Dog.getId_shelter());

			count = addDogStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	/**
	 * pobranie wszystkich y
	 */
	public List<Shelter> getAllSchroniska() {
		List<Shelter> Schroniska = new ArrayList<Shelter>();

		try {
			ResultSet rs = getAllShelterStmt.executeQuery();

			while (rs.next()) {
				Shelter p = new Shelter();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setNrTel(rs.getInt("nrTel"));
				p.setAdvertisingLabel(rs.getString("advertisingLabel"));

				Schroniska.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Schroniska;
	}

	public List<Dog> getAllPiess() {
		List<Dog> Piess = new ArrayList<Dog>();

		try {
			ResultSet rs = getAllDogsStmt.executeQuery();

			while (rs.next()) {
				Dog p = new Dog();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				p.setBreed(rs.getString("breed"));
				p.setId_shelter(rs.getInt("shelter_id"));
				Piess.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Piess;
	}

	/**
	 * pobranie x należących do y
	 */
	public List<Dog> GetPsyNalezacegoDoSchronika(Shelter shelter) {

		List<Dog> Piess = new ArrayList<Dog>();

		try {
			getAllDogsByShelterId.setLong(1, shelter.getId());
			ResultSet rs = getAllDogsByShelterId.executeQuery();

			while (rs.next()) {
				Dog p = new Dog();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				p.setBreed(rs.getString("breed"));
				p.setId_shelter(rs.getInt("shelter_id"));
				Piess.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return Piess;

	}

	public Shelter GetShelterByName(String name) {
		try {
			getShelterByNameStmt.setString(1, name);
			ResultSet rs = getShelterByNameStmt.executeQuery();

			Shelter p = new Shelter();
			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setNrTel(rs.getInt("nrTel"));
				p.setAdvertisingLabel(rs.getString("advertisingLabel"));
			}
			return p;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public Dog GetPiesByName(String name) {
		try {
			getDogByNameStmt.setString(1, name);
			ResultSet rs = getDogByNameStmt.executeQuery();

			Dog p = new Dog();
			while (rs.next()) {
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYob(rs.getInt("yob"));
				p.setBreed(rs.getString("breed"));
				p.setId_shelter(rs.getInt("shelter_id"));
			}
			return p;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * przypisanie x do y
	 */
	public int SetSchroniskToPies(Shelter shelter, Dog Dog) {
		int count = 0;
		try {
			updateDogsShelter.setLong(1, shelter.getId());
			updateDogsShelter.setLong(2, Dog.getId());

			count = updateDogsShelter.executeUpdate();
			return count;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	/**
	 * usunięcie x z y
	 */
	public int DeletePsyWhereShelter(Shelter shelter) {
		int count = 0;
		try {
			deleteDogByShelterStmt.setLong(1, shelter.getId());	
			count = deleteDogByShelterStmt.executeUpdate();
			return count;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

}
